{"version":3,"sources":["lib/rolling-calculator.js","components/dice-table.js","routes.js","index.js"],"names":["calculator","dice","this","map","input","dieValue","parseFloat","text","textOutput","_results","_cumulative","value","i","outcome","toString","padStart","length","hits","replace","outcomeP","reduce","accumulator","hitValue","dieIndex","calculate","out","k","push","Math","round","join","RESULT_MODE","_calcs","interpolateColours","colour0","colour1","p","colourP","channel0","summariseDice","inputString","split","sort","DiceTable","useState","resultMode","setResultMode","inputs","setInputs","focus","setFocus","useEffect","resultModeLabel","maxHits","_","chain","max","valueRange","min","Infinity","headerCols","data","filter","uniqBy","inputIndex","result","getCalculation","cols","key","className","onSubmit","event","preventDefault","focused","target","querySelector","blur","index","type","inputMode","placeholder","style","width","autoFocus","onChange","e","updateInputs","clone","onBlur","onFocus","tabIndex","onClick","splice","position","left","top","v","class","href","scope","rowIndex","colIndex","backgroundColor","float","undefined","rounded","formatPercent","history","createBrowserHistory","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yVA+EMA,E,WACF,aAAsB,+CAAPC,EAAM,yBAANA,EAAM,gBACjBC,KAAKD,KAAOA,EAAKE,KAAI,SAACC,GAClB,IAAIC,EAAWC,WAAWF,EAAO,IAIjC,OAHiB,IAAbC,IACAA,EAAW,IAERA,K,qDA6BM,IAAdE,IAAa,yDAEhB,OADAL,KAAKM,WAAaD,EACXL,O,kCAEE,IAAD,OACRA,KAAKO,SAAW,GAChBP,KAAKQ,YAAc,GAELR,KAAKD,KAAKE,KAAI,SAACQ,GAAD,OAAY,GAAKA,GAAS,MACtD,IADA,IAJQ,WAKCC,GACL,IAAMC,EAAUD,EAAEE,SAAS,GAAGC,SAAS,EAAKd,KAAKe,OAAQ,KACnDC,EAAOJ,EAAQK,QAAQ,KAAM,IAAIF,OACjCG,EAAW,EAAKlB,KAAKmB,QAAO,SAACC,EAAaC,EAAUC,GAKtD,OAAOF,GAHmB,MAAtBR,EAAQU,IACD,GAAKD,GAAY,GAClB,GAAK,GAAKA,GAAY,MAEjC,GAEE,EAAKb,SAASQ,EAAKH,SAAS,OAC7B,EAAKL,SAASQ,EAAKH,SAAS,KAAO,GAEvC,EAAKL,SAASQ,EAAKH,SAAS,MAAQK,GAd/BP,EAAI,EAAGA,EAAC,SAAG,EAAKV,KAAKD,KAAKe,QAAQJ,GAAK,EAAI,EAA3CA,GAiBT,IAAK,IAAIA,EAAIV,KAAKD,KAAKe,OAAQJ,GAAK,EAAGA,GAAK,EACxCV,KAAKQ,YAAYE,EAAEE,SAAS,KAAOZ,KAAKO,SAASG,EAAEE,SAAS,KACxDZ,KAAKQ,aAAaE,EAAI,GAAGE,SAAS,KAClCZ,KAAKQ,YAAYE,EAAEE,SAAS,MAAQZ,KAAKQ,aACpCE,EAAI,GAAGE,SAAS,KAGrBZ,KAAKQ,YAAYE,EAAEE,SAAS,KAAOZ,KAAKO,SAASG,EAAEE,SAAS,KAIpE,OAAOZ,O,8BA3DP,GAHKA,KAAKO,UACNP,KAAKsB,YAELtB,KAAKM,WAAY,CACjB,IAAMiB,EAAM,GACZ,IAAK,IAAMC,KAAKxB,KAAKO,SACjBgB,EAAIE,KAAJ,UAAYD,EAAZ,aAAkBE,KAAKC,MAAyB,IAAnB3B,KAAKO,SAASiB,IAA3C,MAEJ,OAAOD,EAAIK,KAAK,MAEpB,OAAO5B,KAAKO,W,iCAMZ,GAHKP,KAAKQ,aACNR,KAAKsB,YAELtB,KAAKM,WAAY,CACjB,IAAMiB,EAAM,GACZ,IAAK,IAAMC,KAAKxB,KAAKQ,YACjBe,EAAIE,KAAJ,aAAeD,EAAf,aAAqBE,KAAKC,MAA4B,IAAtB3B,KAAKQ,YAAYgB,IAAjD,MAEJ,OAAOD,EAAIK,KAAK,MAEpB,OAAO5B,KAAKQ,gB,KCtGdqB,G,OACM,YADNA,EAEG,QAGHC,EAAS,GAsBf,SAASC,EAAmBC,EAASC,EAASC,GAC5C,IAAMC,EAAUH,EAAQ/B,KAAI,SAACmC,EAAU1B,GAAX,OAAiB0B,GAAaH,EAAQvB,GAAK0B,GAAYF,KACnF,MAAM,QAAN,OAAeC,EAAQP,KAAK,KAA5B,KAaF,IAAMS,EAAgB,SAAAC,GAAW,OAAIA,EAAYC,MAAM,IAAIC,OAAOZ,KAAK,IAAIZ,QAAQ,kBAAmB,OAAOA,QAAQ,UAAW,KA0MjHyB,EA5JG,WAAO,IAAD,EACcC,mBAASb,GADvB,mBACfc,EADe,KACHC,EADG,OAEMF,mBAAS,IAFf,mBAEfG,EAFe,KAEPC,EAFO,OAGIJ,mBAAS,MAHb,mBAGfK,EAHe,KAGRC,EAHQ,KAMtBC,qBAAU,WACNH,EAAU,MAYX,IAEH,IAWMI,EAAkBP,IAAed,EAAoB,UAAY,WAEjEsB,EAAUC,IAAEC,MAAMR,GAAQ5C,IAAI,UAAUqD,MAAM7C,QAC9C8C,EAAa,CAAEC,IAAKC,IAAUH,KAAMG,KACpCC,EAAa,GAEbC,EAAOP,IAAEC,MAAMR,GAAQe,SAASC,OAAOxB,GAAepC,KAAI,SAACF,EAAM+D,GAGrE,IAFA,IAAMC,EAzHV,SAAwBhE,GAItB,OAHK+B,EAAO/B,KACV+B,EAAO/B,GAAQ,YAAID,EAAJ,YAAkBC,EAAKwC,MAAM,MAAKjB,aAE5CQ,EAAO/B,GAqHGiE,CAAejE,GAAM4C,IAAed,EAAoB,UAAY,cAC7EoC,EAAO,GACJvD,EAAKiC,IAAed,EAAoB,EAAI,EAAInB,GAAKyC,EAASzC,GAAK,EAAG,CAC7E,IAAMD,EAAQsD,EAAOrD,EAAEE,SAAS,KAC5BH,EAAQ8C,EAAWD,MAAKC,EAAWD,IAAM7C,GACzCA,EAAQ8C,EAAWC,MAAKD,EAAWC,IAAM/C,GAC7CwD,EAAKxC,KAAKhB,GAES,IAAfqD,GACFJ,EAAWjC,KAAKf,GAGpB,MAAO,CAAEwD,IAAKJ,EAAY/D,OAAMkE,WAC/BxD,QASH,OACE,yBAAK0D,UAAU,6BACb,iDACA,uHAEA,0BACEC,SAAU,SAACC,GACTA,EAAMC,iBACN,IAAMC,EAAUF,EAAMG,OAAOC,cAAc,eACvCF,GAASA,EAAQG,OACrB5B,EAAUD,EAAOe,QAAO,SAAA7D,GAAI,QAAMA,EAAKiB,QAAQ,SAAU,SAE3DmD,UAAU,8BAETtB,EAAO5C,KAAI,SAACF,EAAM4E,GAAP,OACV,yBAAKT,IAAKS,EAAOR,UAAU,oGACzB,2BACES,KAAK,OACLC,UAAU,UACVV,UAAU,yCACV1D,MAAOV,EACP+E,YAAY,MACZC,MAAO,CAAEC,MAAM,GAAD,OAAiC,GAA3BtD,KAAK4B,IAAI,EAAGvD,EAAKe,QAAiB,KAAxC,OACdmE,UAAWN,IAAU5B,EACrBmC,SAAU,SAACC,GACT,IAAMC,EAAehC,IAAEiC,MAAMxC,GAC7BuC,EAAaT,GAASQ,EAAEX,OAAO/D,MAAMO,QAAQ,SAAU,IACvD8B,EAAUsC,IAEZE,OAAQ,WAAQtC,EAAS,OACzBuC,QAAS,WAAQvC,EAAS2B,MAE5B,yBAAKR,UAAU,sBACb,4BACEA,UAAU,8BACVS,KAAK,SACLY,SAAS,KACTC,QAAS,WACP,IAAML,EAAehC,IAAEiC,MAAMxC,GAC7BuC,EAAaM,OAAOf,EAAO,GAC3B7B,EAAUsC,KAPd,aAeN,4BACEjB,UAAU,kCACVS,KAAK,SACLa,QAAS,WACP,IAAML,EAAehC,IAAEiC,MAAMxC,GAC7BuC,EAAa3D,KAAK,IAClBqB,EAAUsC,GACVpC,EAASoC,EAAatE,OAAS,KAPnC,gBAYA,2BAAO8D,KAAK,SAASG,MAAO,CAAEY,SAAU,QAASC,KAAM,OAAQC,IAAK,YAE3D,OAAV9C,GAAmD,IAAjCF,EAAOe,QAAO,SAAAkC,GAAC,OAAIA,KAAGhF,QACvC,uBAAGiF,MAAM,oBACP,qDAA0B,kCAA1B,YAA6C,gCAA7C,aAIHpC,EAAK7C,OAAS,EACb,yBAAKqD,UAAU,iBACb,2BAAG,kDAAuB,uBAAG6B,KAAK,IAAIP,QA5GrB,SAACN,GACxBA,EAAEb,iBAEA1B,EADED,IAAed,EACHA,EAEAA,KAuGwDqB,GAA/D,YACH,yBAAKiB,UAAU,oBACb,2BAAOA,UAAU,SACf,+BACE,4BACE,wBAAI8B,MAAM,QACTvC,EAAWzD,KAAI,SAAAc,GAAI,OAAI,wBAAIkF,MAAM,MAAM9B,UAAU,cAAcD,IAAKnD,GAAOA,QAGhF,+BACG4C,EAAK1D,KAAI,WAAiBiG,GAAjB,IAAGnG,EAAH,EAAGA,KAAMkE,EAAT,EAASA,KAAT,OACR,wBAAIC,IAAK7B,EAActC,IACrB,wBAAIkG,MAAM,OAAO5D,EAActC,IAC9BkE,EAAKhE,KAAI,SAACQ,EAAO0F,GAAR,OAAqB,wBAAIjC,IAAKiC,EAAUhC,UAAU,cAAcY,MAAO,CAAEqB,gBAAkC,kBAAV3F,EAAqBsB,EAAmB,CAAC,GAAI,GAAI,IAAK,CAAC,IAAK,GAAI,MAAOtB,EAAQ8C,EAAWC,MAAQD,EAAWD,IAAMC,EAAWC,MAAQ,gBA3NrQ,SAAuB6C,GACrB,QAAcC,IAAVD,EAAqB,MAAO,IAChC,IAAIE,EAAU7E,KAAKC,MAAc,IAAR0E,GASzB,OARgB,MAAZE,IACEF,EAAQ,IACVE,EAAU,OAERF,EAAQ,IACVE,EAAU,QAGR,GAAN,OAAUA,EAAV,KAgNqRC,CAAc/F,eAO3R,OChPJgG,G,OAAUC,eAED,aACb,OACA,kBAAC,IAAD,CAAQD,QAASA,GACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,KAAK,IAAIC,UAAWnE,OCVnCoE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.6016147f.chunk.js","sourcesContent":["class simulator {\n    constructor(...dice) {\n        this.dice = dice;\n    }\n\n    trialRound() {\n        let hits = 0;\n        for (const hitValue of this.dice) {\n            const rollValue = Math.floor(Math.random() * 10) + 1;\n            if (rollValue >= hitValue) hits += 1;\n        }\n        return hits;\n    }\n\n    get results() {\n        if (!this._results) {\n            this.trials();\n        }\n        if (this.textOutput) {\n            const out = [];\n            for (const k in this._results) {\n                out.push(\n                    `${k}: ${((this._results[k] / this._trials) * 100).toFixed(1)}%`\n                );\n            }\n            return out.join(\"\\n\");\n        }\n        return this._results;\n    }\n\n    get cumulative() {\n        if (!this._cumulative) {\n            this.trials();\n        }\n        if (this.textOutput) {\n            const out = [];\n            for (const k in this._cumulative) {\n                out.push(\n                    `>= ${k}: ${((this._cumulative[k] / this._trials) * 100).toFixed(1)}%`\n                );\n            }\n            return out.join(\"\\n\");\n        }\n        return this._cumulative;\n    }\n\n    format(text = true) {\n        this.textOutput = text;\n        return this;\n    }\n\n    trials(nTrials = 10000) {\n        this._results = {};\n        this._cumulative = {};\n        this._trials = nTrials;\n\n        for (let i = 0; i <= this.dice.length; i += 1) {\n            this._results[i.toString(10)] = 0;\n        }\n\n        for (let n = 0; n < nTrials; n += 1) {\n            const hits = this.trialRound();\n\n            this._results[hits.toString(10)] += 1;\n        }\n\n        for (let i = this.dice.length; i >= 0; i -= 1) {\n            this._cumulative[i.toString(10)] = this._results[i.toString(10)];\n            if (this._cumulative[(i + 1).toString(10)]) {\n                this._cumulative[i.toString(10)] += this._cumulative[\n                    (i + 1).toString(10)\n                ];\n            }\n        }\n\n        return this;\n    }\n}\n\nclass calculator {\n    constructor(...dice) {\n        this.dice = dice.map((input) => {\n            let dieValue = parseFloat(input, 10);\n            if (dieValue === 0) {\n                dieValue = 10;\n            }\n            return dieValue;\n        });\n    }\n    get results() {\n        if (!this._results) {\n            this.calculate();\n        }\n        if (this.textOutput) {\n            const out = [];\n            for (const k in this._results) {\n                out.push(`${k}: ${Math.round(this._results[k] * 100)}%`);\n            }\n            return out.join(\"\\n\");\n        }\n        return this._results;\n    }\n    get cumulative() {\n        if (!this._cumulative) {\n            this.calculate();\n        }\n        if (this.textOutput) {\n            const out = [];\n            for (const k in this._cumulative) {\n                out.push(`>= ${k}: ${Math.round(this._cumulative[k] * 100)}%`);\n            }\n            return out.join(\"\\n\");\n        }\n        return this._cumulative;\n    }\n    format(text = true) {\n        this.textOutput = text;\n        return this;\n    }\n    calculate() {\n        this._results = {};\n        this._cumulative = {};\n\n        const diceP = this.dice.map((value) => (11 - value) / 10);\n        for (let i = 0; i < 2 ** this.dice.length; i += 1) {\n            const outcome = i.toString(2).padStart(this.dice.length, \"0\");\n            const hits = outcome.replace(/0/g, \"\").length;\n            const outcomeP = this.dice.reduce((accumulator, hitValue, dieIndex) => {\n                const p =\n                    outcome[dieIndex] === \"1\"\n                        ? (11 - hitValue) / 10\n                        : 1 - (11 - hitValue) / 10;\n                return accumulator * p;\n            }, 1);\n\n            if (!this._results[hits.toString(10)]) {\n                this._results[hits.toString(10)] = 0;\n            }\n            this._results[hits.toString(10)] += outcomeP;\n        }\n\n        for (let i = this.dice.length; i >= 0; i -= 1) {\n            this._cumulative[i.toString(10)] = this._results[i.toString(10)];\n            if (this._cumulative[(i + 1).toString(10)]) {\n                this._cumulative[i.toString(10)] += this._cumulative[\n                    (i + 1).toString(10)\n                ];\n            } else {\n                this._cumulative[i.toString(10)] = this._results[i.toString(10)];\n            }\n        }\n\n        return this;\n    }\n}\n\nexport { simulator, calculator };\n","import React, { useState, useEffect, useMemo } from 'react';\nimport _ from 'lodash';\n\n// import { Chart, curveLinear } from 'react-charts';\nimport { ResponsiveLine } from '@nivo/line';\n\nimport { calculator } from '../lib/rolling-calculator';\nimport { GAME_COLOURS } from '../lib/constants';\n\nimport \"../styles/components/dice-table.css\";\n\nconst RESULT_MODE = {\n  AT_LEAST: 'AT_LEAST',\n  EXACT: 'EXACT',\n};\n\nconst _calcs = {};\nfunction getCalculation(dice) {\n  if (!_calcs[dice]) {\n    _calcs[dice] = new calculator(...dice.split('')).calculate();\n  }\n  return _calcs[dice];\n}\n\nfunction formatPercent(float) {\n  if (float === undefined) return '-';\n  let rounded = Math.round(float * 100);\n  if (rounded === 100) {\n    if (float < 1) {\n      rounded = '>99';\n    }\n    if (float > 1) {\n      rounded = '100';\n    }\n  }\n  return `${rounded}%`;\n}\n\nfunction interpolateColours(colour0, colour1, p) {\n  const colourP = colour0.map((channel0, i) => channel0 + ((colour1[i] - channel0) * p));\n  return `rgba(${colourP.join(',')})`;\n}\n\nfunction rowKey(seed) {\n  return (Date.now() + Math.random() + seed).toString();\n}\n\n// const summariseDice = inputString => _.chain(inputString.split(''))\n//   .groupBy()\n//   .toPairs()\n//   .map(([groupValue, group]) => group.length === 1 ? groupValue : `${groupValue}×${group.length}`)\n//   .value()\n//   .join(',\\u2009');\nconst summariseDice = inputString => inputString.split('').sort().join('').replace(/([0-9])(?!\\1+)/g, '$& ').replace(/[^\\d]+$/, '');\n\nconst ResultsChart = ({ data, colours = [], ...props } = {}) => (\n  <ResponsiveLine\n    data={data}\n    curve=\"linear\"\n    animate={false}\n    // enablePoints={false}\n    lineWidth={2}\n    pointSize={5}\n    // pointSymbol={({ size, color }) => (\n    //     <svg width={size} height={size} viewBox=\"8 8 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    //         <path d=\"M0 13.261L5.23729 8L0 2.73904L2.79661 0L8 5.22756L13.2034 0L16 2.73904L10.7627 8L16 13.261L13.2034 16L8 10.7724L2.79661 16L0 13.261Z\" fill={color} />\n    //     </svg>\n    // )}\n    // pointColor={{ from: 'seriesColor' }}\n    xScale={{\n      type: 'point',\n      min: 1,\n      max: 'auto',\n    }}\n    yScale={{\n      type: 'linear',\n      min: 0,\n      max: 1,\n    }}\n    axisLeft={{\n      format: '.0%'\n    }}\n    margin={{ top: 0, left: 0, bottom: 0, right: 0 }}\n    colors={colours}\n  // axisBottom={{\n  //     legend: 'linear scale',\n  //     // legendOffset: -12,\n  // }}\n  />\n);\n\nconst DiceInput = ({ onUpdate, onRemove, value, colour }) => {\n  return (\n    <div className=\"btn-toolbar\">\n      <input type=\"tel\" className=\"form-control\" />\n    </div>\n  )\n};\n\nconst DiceTable = () => {\n  const [resultMode, setResultMode] = useState(RESULT_MODE.AT_LEAST);\n  const [inputs, setInputs] = useState([]);\n  const [focus, setFocus] = useState(null);\n\n  // EXAMPLE CONTENT\n  useEffect(() => {\n      setInputs([\n        // '',\n        // '1',\n        // '22',\n        // '333',\n        // '4444',\n        // '55555',\n        // '666666',\n        // '8888',\n        // '333',\n        // '99999',\n      ]);\n  }, []);\n\n  const rows = [];\n\n  const toggleResultMode = (e) => {\n    e.preventDefault();\n    if (resultMode === RESULT_MODE.AT_LEAST) {\n      setResultMode(RESULT_MODE.EXACT);\n    } else {\n      setResultMode(RESULT_MODE.AT_LEAST);\n    }\n  }\n\n  const resultModeLabel = resultMode === RESULT_MODE.EXACT ? 'exactly' : 'at least';\n\n  const maxHits = _.chain(inputs).map('length').max().value();\n  const valueRange = { min: Infinity, max: -Infinity };\n  const headerCols = [];\n\n  const data = _.chain(inputs).filter().uniqBy(summariseDice).map((dice, inputIndex) => {\n    const result = getCalculation(dice)[resultMode === RESULT_MODE.EXACT ? 'results' : 'cumulative'];\n    const cols = [];\n    for (let i = (resultMode === RESULT_MODE.EXACT ? 0 : 1); i <= maxHits; i += 1) {\n      const value = result[i.toString(10)];\n      if (value > valueRange.max) valueRange.max = value;\n      if (value < valueRange.min) valueRange.min = value;\n      cols.push(value);\n\n      if (inputIndex === 0) {\n        headerCols.push(i);\n      }\n    }\n    return { key: inputIndex, dice, cols };\n  }).value();\n\n  // if (inputs.filter(({ dice }) => dice).length > 0) {\n  //   data.push({ dice: '', cols: headerCols.map(() => undefined) });\n  // } else {\n  //   headerCols.push(1);\n  //   data.push({ dice: '', cols: [undefined] });\n  // }\n\n  return (\n    <div className=\"container dice-table my-2\">\n      <h1>Hit probabilities</h1>\n      <p>Enter combat values below to see the probability of producing different numbers of hits.</p>\n\n      <form\n        onSubmit={(event) => {\n          event.preventDefault();\n          const focused = event.target.querySelector('input:focus');\n          if (focused) focused.blur();\n          setInputs(inputs.filter(dice => !!dice.replace(/[^\\d]/g, '')));\n        }}\n        className=\"d-flex flex-wrap mt-2 mb-2\"\n      >\n        {inputs.map((dice, index) => (\n          <div key={index} className=\"dice-input input-group input-group-sm flex-nowrap flex-grow-0 flex-shrink-1 mb-0-5 mr-0-5 w-auto\">\n            <input\n              type=\"text\"\n              inputMode=\"numeric\"\n              className=\"form-control flex-grow-0 flex-shrink-0\"\n              value={dice}\n              placeholder=\"...\"\n              style={{ width: `${(Math.max(3, dice.length) * 0.6) + 1.35}em` }}\n              autoFocus={index === focus}\n              onChange={(e) => {\n                const updateInputs = _.clone(inputs);\n                updateInputs[index] = e.target.value.replace(/[^\\d]/g, '');\n                setInputs(updateInputs);\n              }}\n              onBlur={() => { setFocus(null); }}\n              onFocus={() => { setFocus(index); }}\n            />\n            <div className=\"input-group-append\">\n              <button\n                className=\"btn btn-sm btn-outline-dark\"\n                type=\"button\"\n                tabIndex=\"-1\"\n                onClick={() => {\n                  const updateInputs = _.clone(inputs);\n                  updateInputs.splice(index, 1);\n                  setInputs(updateInputs);\n                }}\n              >\n                &times;\n                </button>\n            </div>\n          </div>\n        ))}\n        <button\n          className=\"btn btn-sm btn-secondary mb-0-5\"\n          type=\"button\"\n          onClick={() => {\n            const updateInputs = _.clone(inputs);\n            updateInputs.push('');\n            setInputs(updateInputs);\n            setFocus(updateInputs.length - 1);\n          }}\n        >\n          + Add values\n          </button>\n        <input type=\"submit\" style={{ position: 'fixed', left: '100%', top: '-100%' }} />\n      </form>\n      {focus !== null && inputs.filter(v => v).length === 0 && (\n        <p class=\"mt-n2 text-muted\">\n          <small>Combat values, eg \"<u>688</u>\". Enter <u>0</u> for 10.</small>\n        </p>\n      )}\n\n      {data.length > 0 ? (\n        <div className=\"results-table\">\n          <p><strong>Probability of <a href=\"#\" onClick={toggleResultMode}>{resultModeLabel}</a> X hits</strong></p>\n          <div className=\"table-responsive\">\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th scope=\"col\" />\n                  {headerCols.map(hits => <th scope=\"col\" className=\"text-center\" key={hits}>{hits}</th>)}\n                </tr>\n              </thead>\n              <tbody>\n                {data.map(({ dice, cols }, rowIndex) => (\n                  <tr key={summariseDice(dice)}>\n                    <th scope=\"col\">{summariseDice(dice)}</th>\n                    {cols.map((value, colIndex) => <td key={colIndex} className=\"text-center\" style={{ backgroundColor: typeof value === 'number' ? interpolateColours([20, 20, 50], [255, 40, 220], (value - valueRange.min) / (valueRange.max - valueRange.min)) : 'transparent' }}>{formatPercent(value)}</td>)}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default DiceTable;\n","import React from \"react\";\nimport _ from 'lodash';\nimport { Router, Route, Switch } from \"react-router\";\nimport { createBrowserHistory } from \"history\";\n\n// import Tech from './components/tech';\nimport DiceTable from './components/dice-table';\n\nimport './styles/app.css';\n\nconst history = createBrowserHistory();\n\nexport default () => {\n  return (\n  <Router history={history}>\n      <Switch>\n        <Route path=\"/\" component={DiceTable} />\n      </Switch>\n  </Router>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Routes from './routes';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}