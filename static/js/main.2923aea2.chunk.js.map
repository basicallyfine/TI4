{"version":3,"sources":["lib/rolling-calculator.js","components/rolling-calculator.js","components/dice-chart.js","routes.js","index.js"],"names":["calculator","dice","this","text","textOutput","_results","_cumulative","map","value","i","outcome","toString","padStart","length","hits","replace","outcomeP","reduce","accumulator","hitValue","dieIndex","calculate","out","k","push","Math","round","join","Calculator","state","setDice","bind","addDie","removeDie","setCalculation","renderCalulation","SwiperCore","use","Mousewheel","setState","swiperInit","values","filteredValues","_","chain","filter","v","sortBy","concat","index","newDice","clone","splice","valueString","sort","calculation","split","s","parseInt","results","cumulative","float","rounded","console","log","rows","key","formatPercent","className","addButtons","type","onClick","class","role","Component","ResultsChart","data","curve","animate","enablePoints","xScale","min","max","yScale","axisLeft","format","margin","top","left","bottom","right","colors","DiceChart","id","x","y","history","createBrowserHistory","path","component","RollingCalculator","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2923aea2.chunk.js","sourcesContent":["class simulator {\n    constructor(...dice) {\n        this.dice = dice;\n    }\n\n    trialRound() {\n        let hits = 0;\n        for (const hitValue of this.dice) {\n            const rollValue = Math.floor(Math.random() * 10) + 1;\n            if (rollValue >= hitValue) hits += 1;\n        }\n        return hits;\n    }\n\n    get results() {\n        if (!this._results) {\n            this.trials();\n        }\n        if (this.textOutput) {\n            const out = [];\n            for (const k in this._results) {\n                out.push(\n                    `${k}: ${((this._results[k] / this._trials) * 100).toFixed(1)}%`\n                );\n            }\n            return out.join(\"\\n\");\n        }\n        return this._results;\n    }\n\n    get cumulative() {\n        if (!this._cumulative) {\n            this.trials();\n        }\n        if (this.textOutput) {\n            const out = [];\n            for (const k in this._cumulative) {\n                out.push(\n                    `>= ${k}: ${((this._cumulative[k] / this._trials) * 100).toFixed(1)}%`\n                );\n            }\n            return out.join(\"\\n\");\n        }\n        return this._cumulative;\n    }\n\n    format(text = true) {\n        this.textOutput = text;\n        return this;\n    }\n\n    trials(nTrials = 10000) {\n        this._results = {};\n        this._cumulative = {};\n        this._trials = nTrials;\n\n        for (let i = 0; i <= this.dice.length; i += 1) {\n            this._results[i.toString(10)] = 0;\n        }\n\n        for (let n = 0; n < nTrials; n += 1) {\n            const hits = this.trialRound();\n\n            this._results[hits.toString(10)] += 1;\n        }\n\n        for (let i = this.dice.length; i >= 0; i -= 1) {\n            this._cumulative[i.toString(10)] = this._results[i.toString(10)];\n            if (this._cumulative[(i + 1).toString(10)]) {\n                this._cumulative[i.toString(10)] += this._cumulative[\n                    (i + 1).toString(10)\n                ];\n            }\n        }\n\n        return this;\n    }\n}\n\nclass calculator {\n    constructor(...dice) {\n        this.dice = dice;\n    }\n    get results() {\n        if (!this._results) {\n            this.calculate();\n        }\n        if (this.textOutput) {\n            const out = [];\n            for (const k in this._results) {\n                out.push(`${k}: ${Math.round(this._results[k] * 100)}%`);\n            }\n            return out.join(\"\\n\");\n        }\n        return this._results;\n    }\n    get cumulative() {\n        if (!this._cumulative) {\n            this.calculate();\n        }\n        if (this.textOutput) {\n            const out = [];\n            for (const k in this._cumulative) {\n                out.push(`>= ${k}: ${Math.round(this._cumulative[k] * 100)}%`);\n            }\n            return out.join(\"\\n\");\n        }\n        return this._cumulative;\n    }\n    format(text = true) {\n        this.textOutput = text;\n        return this;\n    }\n    calculate() {\n        this._results = {};\n        this._cumulative = {};\n\n        const diceP = this.dice.map((value) => (11 - value) / 10);\n        for (let i = 0; i < 2 ** this.dice.length; i += 1) {\n            const outcome = i.toString(2).padStart(this.dice.length, \"0\");\n            const hits = outcome.replace(/0/g, \"\").length;\n            const outcomeP = this.dice.reduce((accumulator, hitValue, dieIndex) => {\n                const p =\n                    outcome[dieIndex] === \"1\"\n                        ? (11 - hitValue) / 10\n                        : 1 - (11 - hitValue) / 10;\n                return accumulator * p;\n            }, 1);\n\n            if (!this._results[hits.toString(10)]) {\n                this._results[hits.toString(10)] = 0;\n            }\n            this._results[hits.toString(10)] += outcomeP;\n        }\n\n        for (let i = this.dice.length; i >= 0; i -= 1) {\n            this._cumulative[i.toString(10)] = this._results[i.toString(10)];\n            if (this._cumulative[(i + 1).toString(10)]) {\n                this._cumulative[i.toString(10)] += this._cumulative[\n                    (i + 1).toString(10)\n                ];\n            } else {\n                this._cumulative[i.toString(10)] = this._results[i.toString(10)];\n            }\n        }\n\n        return this;\n    }\n}\n\nexport { simulator, calculator };\n","import React, { useState, useEffect, Component } from \"react\";\nimport _ from \"lodash\";\nimport SwiperCore, { Mousewheel } from \"swiper\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport { FaPlusCircle, FaMinusCircle } from \"react-icons/fa\";\n\nimport { calculator } from \"../lib/rolling-calculator\";\n\n// import \"swiper/swiper.scss\";\n// import \"swiper/components/effect-cube/effect-cube.scss\";\nimport \"swiper/swiper-bundle.css\";\nimport \"../styles/components/rolling-calculator.css\";\n\nclass Calculator extends Component {\n  constructor() {\n    super();\n    this.state = { dice: [] };\n    this.setDice = this.setDice.bind(this);\n    this.addDie = this.addDie.bind(this);\n    this.removeDie = this.removeDie.bind(this);\n    this.setCalculation = this.setCalculation.bind(this);\n    this.renderCalulation = this.renderCalulation.bind(this);\n  }\n  componentDidMount() {\n    SwiperCore.use([Mousewheel]);\n    this.setState({ swiperInit: true });\n  }\n  setDice(values) {\n    const filteredValues = _.chain(values).filter((v) => typeof v === \"number\").sortBy().value();\n    this.setState({\n      dice: filteredValues\n    }, this.setCalculation);\n  }\n  addDie(value) {\n    this.setDice(this.state.dice.concat(value));\n  }\n  removeDie(index) {\n    const newDice = _.clone(this.state.dice);\n    this.setDice(newDice.splice(index, 1));\n  }\n  async setCalculation() {\n    const valueString = _.chain(this.state.dice)\n      .filter()\n      .sort()\n      .value()\n      .join(\",\");\n    if (valueString === this.state.valueString) {\n      return;\n    }\n\n    if (!valueString) {\n      this.setState({\n        calculator: null,\n        valueString\n      });\n      return\n    }\n\n    const calculation = new calculator(\n      ...valueString.split(\",\").map((s) => parseInt(s, 10))\n    );\n\n    this.setState({\n      calculator: {\n        results: calculation.results,\n        cumulative: calculation.cumulative,\n      },\n      valueString,\n    });\n  }\n  formatPercent(float) {\n    let rounded = Math.round(float * 100);\n    if (rounded === 100) {\n      console.log(rounded, float, 1 - float);\n      if (float < 1) {\n        rounded = '>99';\n      }\n      if (float > 1) {\n        rounded = '100';\n      }\n    }\n    return rounded;\n  }\n  renderCalulation() {\n    if (!this.state.calculator) return null;\n\n    const rows = [];\n    for (const hits in this.state.calculator.results) {\n      rows.push(\n        <tr key={hits}>\n          <th>{hits}</th>\n          <td>{this.formatPercent(this.state.calculator.cumulative[hits])}%</td>\n          <td>{this.formatPercent(this.state.calculator.results[hits])}%</td>\n        </tr>\n      );\n    }\n\n    return (\n      <table className=\"calculation-table mt-2\">\n        <thead>\n          <tr>\n            <th>Hits</th>\n            <th>At least</th>\n            <th>Exactly</th>\n          </tr>\n        </thead>\n        <tbody>{rows}</tbody>\n      </table>\n    );\n  }\n  render() {\n    // const diceValueGroups = _.chain(this.state.dice)\n    //   .filter()\n    //   .groupBy()\n    //   .toPairs()\n    //   .map(([value, rolls]) => `${value}×${rolls.length}`)\n    //   .value();\n\n    const addButtons = [];\n    for (let i = 10; i >= 1; i -= 1) {\n      addButtons.push((\n        <button\n          key={i}\n          type=\"button\"\n          className=\"btn btn-outline-dark\"\n          // className=\"btn btn-secondary\"\n          onClick={() => { this.addDie(i); }}\n        >\n          {i}\n        </button>\n      ));\n    }\n\n    return (\n      <div className=\"container rolling-calculator my-2\">\n        <h1>Set some dice to see some numbers</h1>\n\n        <div className=\"add-die-button-container\">\n          <div class=\"btn-group\" role=\"group\">\n            {addButtons}\n          </div>\n        </div>\n\n        <div className=\"dice-container my-2\">\n          {this.state.dice.map((value, i) => (\n            <div className=\"die-box\" key={i}>{value}</div>\n          ))}\n        </div>\n        {/* diceValueGroups.length > 0 && (\n          <h4>Rolling for: {diceValueGroups.join(\", \")}</h4>\n        ) */}\n        {this.renderCalulation()}\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React from 'react';\n\n// import { Chart, curveLinear } from 'react-charts';\nimport { ResponsiveLine } from '@nivo/line';\n\nimport \"../styles/components/dice-chart.css\";\n\nconst ResultsChart = ({ data }) => (\n    <div className=\"results-chart-wrapper\" >\n        <div className=\"results-chart-contents\" >\n            <ResponsiveLine\n                data={data}\n                curve=\"linear\"\n                animate={false}\n                enablePoints={false}\n                xScale={{\n                    type: 'point',\n                    min: 1,\n                    max: 'auto',\n                }}\n                yScale={{\n                    type: 'linear',\n                    min: 0,\n                    max: 1,\n                }}\n                axisLeft={{\n                    format: '.0%'\n                }}\n                margin={{ top: 0, left: 0, bottom: 0, right: 0 }}\n                colors={['#fff']}\n                // axisBottom={{\n                //     legend: 'linear scale',\n                //     // legendOffset: -12,\n                // }}\n            />\n            <div className=\"result-label-bottom text-center\"><strong>Hits</strong> <small>(at least)</small></div>\n        </div>\n    </div>\n);\n\nconst DiceChart = () => {\n    return (\n        <div className=\"container dice-chart my-2\">\n            <ResultsChart\n                data={[\n                    {\n                        id: 'fake corp. A',\n                        data: [\n                            { x: 1, y: 0.8 },\n                            { x: 2, y: 0.6 },\n                            { x: 3, y: 0.36 },\n                            { x: 4, y: 0.216 },\n                            { x: 5, y: 0.1296 },\n                            { x: 6, y: 0.07776 },\n                            { x: 7, y: 0 },\n                        ],\n                    },\n                ]}\n            />\n        </div>\n    )\n};\n\nexport default DiceChart;","import React from \"react\";\nimport _ from 'lodash';\nimport { Router, Route, Switch } from \"react-router\";\nimport { createBrowserHistory } from \"history\";\n\n// import Tech from './components/tech';\nimport RollingCalculator from './components/rolling-calculator';\nimport DiceChart from './components/dice-chart';\n\nimport './styles/app.css';\n\nconst history = createBrowserHistory();\n\nexport default () => {\n  return (\n  <Router history={history}>\n      <Switch>\n        <Route path=\"/roll-calculator\" component={RollingCalculator} />\n        <Route path=\"/\" component={DiceChart} />\n      </Switch>\n  </Router>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Routes from './routes';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}