{"version":3,"sources":["lib/rolling-calculator.js","components/dice-table.js","routes.js","index.js"],"names":["calculator","dice","this","map","input","dieValue","parseFloat","text","textOutput","_results","_cumulative","value","i","outcome","toString","padStart","length","hits","replace","outcomeP","reduce","accumulator","hitValue","dieIndex","calculate","out","k","push","Math","round","join","RESULT_MODE","_calcs","interpolateColours","colour0","colour1","p","colourP","channel0","DiceChart","useState","resultMode","setResultMode","inputs","setInputs","resultModeLabel","maxHits","_","chain","max","valueRange","min","Infinity","headerCols","data","inputIndex","key","result","split","getCalculation","cols","filter","undefined","className","onSubmit","event","preventDefault","focused","target","querySelector","blur","scope","rowIndex","style","minWidth","type","placeholder","onChange","e","updateInputs","clone","last","pop","onBlur","table","parentNode","setTimeout","colIndex","backgroundColor","float","rounded","formatPercent","position","left","top","href","onClick","history","createBrowserHistory","path","component","DiceTable","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1de12df9.chunk.js","sourcesContent":["class simulator {\n    constructor(...dice) {\n        this.dice = dice;\n    }\n\n    trialRound() {\n        let hits = 0;\n        for (const hitValue of this.dice) {\n            const rollValue = Math.floor(Math.random() * 10) + 1;\n            if (rollValue >= hitValue) hits += 1;\n        }\n        return hits;\n    }\n\n    get results() {\n        if (!this._results) {\n            this.trials();\n        }\n        if (this.textOutput) {\n            const out = [];\n            for (const k in this._results) {\n                out.push(\n                    `${k}: ${((this._results[k] / this._trials) * 100).toFixed(1)}%`\n                );\n            }\n            return out.join(\"\\n\");\n        }\n        return this._results;\n    }\n\n    get cumulative() {\n        if (!this._cumulative) {\n            this.trials();\n        }\n        if (this.textOutput) {\n            const out = [];\n            for (const k in this._cumulative) {\n                out.push(\n                    `>= ${k}: ${((this._cumulative[k] / this._trials) * 100).toFixed(1)}%`\n                );\n            }\n            return out.join(\"\\n\");\n        }\n        return this._cumulative;\n    }\n\n    format(text = true) {\n        this.textOutput = text;\n        return this;\n    }\n\n    trials(nTrials = 10000) {\n        this._results = {};\n        this._cumulative = {};\n        this._trials = nTrials;\n\n        for (let i = 0; i <= this.dice.length; i += 1) {\n            this._results[i.toString(10)] = 0;\n        }\n\n        for (let n = 0; n < nTrials; n += 1) {\n            const hits = this.trialRound();\n\n            this._results[hits.toString(10)] += 1;\n        }\n\n        for (let i = this.dice.length; i >= 0; i -= 1) {\n            this._cumulative[i.toString(10)] = this._results[i.toString(10)];\n            if (this._cumulative[(i + 1).toString(10)]) {\n                this._cumulative[i.toString(10)] += this._cumulative[\n                    (i + 1).toString(10)\n                ];\n            }\n        }\n\n        return this;\n    }\n}\n\nclass calculator {\n    constructor(...dice) {\n        this.dice = dice.map((input) => {\n            let dieValue = parseFloat(input, 10);\n            if (dieValue === 0) {\n                dieValue = 10;\n            }\n            return dieValue;\n        });\n    }\n    get results() {\n        if (!this._results) {\n            this.calculate();\n        }\n        if (this.textOutput) {\n            const out = [];\n            for (const k in this._results) {\n                out.push(`${k}: ${Math.round(this._results[k] * 100)}%`);\n            }\n            return out.join(\"\\n\");\n        }\n        return this._results;\n    }\n    get cumulative() {\n        if (!this._cumulative) {\n            this.calculate();\n        }\n        if (this.textOutput) {\n            const out = [];\n            for (const k in this._cumulative) {\n                out.push(`>= ${k}: ${Math.round(this._cumulative[k] * 100)}%`);\n            }\n            return out.join(\"\\n\");\n        }\n        return this._cumulative;\n    }\n    format(text = true) {\n        this.textOutput = text;\n        return this;\n    }\n    calculate() {\n        this._results = {};\n        this._cumulative = {};\n\n        const diceP = this.dice.map((value) => (11 - value) / 10);\n        for (let i = 0; i < 2 ** this.dice.length; i += 1) {\n            const outcome = i.toString(2).padStart(this.dice.length, \"0\");\n            const hits = outcome.replace(/0/g, \"\").length;\n            const outcomeP = this.dice.reduce((accumulator, hitValue, dieIndex) => {\n                const p =\n                    outcome[dieIndex] === \"1\"\n                        ? (11 - hitValue) / 10\n                        : 1 - (11 - hitValue) / 10;\n                return accumulator * p;\n            }, 1);\n\n            if (!this._results[hits.toString(10)]) {\n                this._results[hits.toString(10)] = 0;\n            }\n            this._results[hits.toString(10)] += outcomeP;\n        }\n\n        for (let i = this.dice.length; i >= 0; i -= 1) {\n            this._cumulative[i.toString(10)] = this._results[i.toString(10)];\n            if (this._cumulative[(i + 1).toString(10)]) {\n                this._cumulative[i.toString(10)] += this._cumulative[\n                    (i + 1).toString(10)\n                ];\n            } else {\n                this._cumulative[i.toString(10)] = this._results[i.toString(10)];\n            }\n        }\n\n        return this;\n    }\n}\n\nexport { simulator, calculator };\n","import React, { useState, useEffect, useMemo } from 'react';\nimport _ from 'lodash';\n\n// import { Chart, curveLinear } from 'react-charts';\nimport { ResponsiveLine } from '@nivo/line';\n\nimport { calculator } from '../lib/rolling-calculator';\nimport { GAME_COLOURS } from '../lib/constants';\n\nimport \"../styles/components/dice-table.css\";\n\nconst RESULT_MODE = {\n    AT_LEAST: 'AT_LEAST',\n    EXACT: 'EXACT',\n};\n\nconst _calcs = {};\nfunction getCalculation(dice) {\n    if (!_calcs[dice]) {\n        _calcs[dice] = new calculator(...dice.split('')).calculate();\n    }\n    return _calcs[dice];\n}\n\nfunction formatPercent(float) {\n  if (float === undefined) return '-';\n  let rounded = Math.round(float * 100);\n  if (rounded === 100) {\n    if (float < 1) {\n      rounded = '>99';\n    }\n    if (float > 1) {\n      rounded = '100';\n    }\n  }\n  return `${rounded}%`;\n}\n\nfunction interpolateColours (colour0, colour1, p) {\n  const colourP = colour0.map((channel0, i) => channel0 + ((colour1[i] - channel0) * p));\n  return `rgba(${colourP.join(',')})`;\n}\n\nfunction rowKey(seed) {\n  return (Date.now() + Math.random() + seed).toString();\n}\n\nconst ResultsChart = ({ data, colours = [], ...props } = {}) => (\n    <ResponsiveLine\n        data={data}\n        curve=\"linear\"\n        animate={false}\n        // enablePoints={false}\n        lineWidth={2}\n        pointSize={5}\n        // pointSymbol={({ size, color }) => (\n        //     <svg width={size} height={size} viewBox=\"8 8 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        //         <path d=\"M0 13.261L5.23729 8L0 2.73904L2.79661 0L8 5.22756L13.2034 0L16 2.73904L10.7627 8L16 13.261L13.2034 16L8 10.7724L2.79661 16L0 13.261Z\" fill={color} />\n        //     </svg>\n        // )}\n        // pointColor={{ from: 'seriesColor' }}\n        xScale={{\n            type: 'point',\n            min: 1,\n            max: 'auto',\n        }}\n        yScale={{\n            type: 'linear',\n            min: 0,\n            max: 1,\n        }}\n        axisLeft={{\n            format: '.0%'\n        }}\n        margin={{ top: 0, left: 0, bottom: 0, right: 0 }}\n        colors={colours}\n    // axisBottom={{\n    //     legend: 'linear scale',\n    //     // legendOffset: -12,\n    // }}\n    />\n);\n\nconst DiceInput = ({ onUpdate, onRemove, value, colour }) => {\n    return (\n        <div className=\"btn-toolbar\">\n            <input type=\"tel\" className=\"form-control\" />\n        </div>\n    )\n};\n\nconst DiceChart = () => {\n    const [resultMode, setResultMode] = useState(RESULT_MODE.AT_LEAST);\n    const [inputs, setInputs] = useState([]);\n\n    // EXAMPLE CONTENT\n    // useEffect(() => {\n    //     if (inputs.length === 0) {\n    //         setInputs([\n    //             { dice: '699' },\n    //             { dice: '888' },\n    //             { dice: '8888' },\n    //             { dice: '333' },\n    //             { dice: '99999' },\n    //         ]);\n    //     }\n    // });\n\n    const rows = [];\n\n    const toggleResultMode = (e) => {\n        e.preventDefault();\n        if (resultMode === RESULT_MODE.AT_LEAST) {\n            setResultMode(RESULT_MODE.EXACT);\n        } else {\n            setResultMode(RESULT_MODE.AT_LEAST);\n        }\n    }\n\n    const resultModeLabel = resultMode === RESULT_MODE.EXACT ? 'exactly' : 'at least';\n\n    const maxHits = _.chain(inputs).map(input => input.dice.length).max().value();\n    const valueRange = { min: Infinity, max: -Infinity };\n    const headerCols = [];\n\n    const data = inputs.map(({ key, dice }, inputIndex) => {\n        const result = getCalculation(dice)[resultMode === RESULT_MODE.EXACT ? 'results' : 'cumulative'];\n        const cols = [];\n        for (let i = (resultMode === RESULT_MODE.EXACT ? 0 : 1); i <= maxHits; i += 1) {\n          const value = result[i.toString(10)];\n          if (value > valueRange.max) valueRange.max = value;\n          if (value < valueRange.min) valueRange.min = value;\n          cols.push(value);\n\n          if (inputIndex === 0) {\n            headerCols.push(i);\n          }\n        }\n        return { key, dice, cols };\n    });\n\n    if (inputs.filter(({ dice }) => dice).length > 0) {\n      data.push({ dice: '', cols: headerCols.map(() => undefined) });\n    } else {\n      headerCols.push(1);\n      data.push({ dice: '', cols: [undefined] });\n    }\n\n    return (\n        <div className=\"container dice-table my-2\">\n            <h1>Dice probabilities</h1>\n            <p>Enter combat values into the table to see the probability of producing different numbers of hits. Enter 0 for 10.</p>\n            <div className=\"table-responsive\">\n              <form\n                onSubmit={(event) => {\n                  event.preventDefault();\n                  const focused = event.target.querySelector('input:focus');\n                  if (focused) focused.blur();\n                  setInputs(inputs.filter(({ dice }) => dice));\n                }}\n              >\n              <table className=\"table table-bordered\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\" />\n                    {headerCols.map(hits => <th scope=\"col\" className=\"text-center\" key={hits}>{hits}</th>)}\n                  </tr>\n                </thead>\n                <tbody>\n                  {data.map(({ dice, cols }, rowIndex) => (\n                    <tr key={rowIndex}>\n                      <th scope=\"row\" className=\"dice-input-th\" style={{ minWidth: `${(dice.length * 0.81) + 2.2}em` }}>\n                        <input\n                          value={dice}\n                          className=\"dice-input form-control\"\n                          type=\"tel\"\n                          placeholder=\"...\"\n                          onChange={(e) => {\n                            const updateInputs = _.clone(inputs);\n                            if (!updateInputs[rowIndex]) {\n                              updateInputs[rowIndex] = {};\n                            }\n                            updateInputs[rowIndex].dice = e.target.value.replace(/[^\\d]/g, '');\n                            if (!_.last(updateInputs).dice) {\n                              updateInputs.pop();\n                            }\n                            setInputs(updateInputs);\n                          }}\n                          onBlur={({ target }) => {\n                            const table = target.parentNode.parentNode.parentNode;\n                            setTimeout(() => {\n                              if (table && !table.querySelector('input:focus')) {\n                                setInputs(inputs.filter(({ dice }) => dice));\n                              }\n                            }, 100);\n                          }}\n                        />\n                      </th>\n                      {cols.map((value, colIndex) => <td key={colIndex} className=\"text-center\" style={{ backgroundColor: typeof value === 'number' ? interpolateColours([20,20,50], [255,40,220], (value - valueRange.min) / (valueRange.max - valueRange.min)) : 'transparent'}}>{formatPercent(value)}</td>)}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n              <input type=\"submit\" style={{ position: 'fixed', left: '100%', top: '-100%' }} />\n              </form>\n            </div>\n            <p className=\"mt-0\"><small>Probability of <a href=\"#\" onClick={toggleResultMode}>{resultModeLabel}</a> X hits</small></p>\n        </div>\n    )\n};\n\nexport default DiceChart;\n","import React from \"react\";\nimport _ from 'lodash';\nimport { Router, Route, Switch } from \"react-router\";\nimport { createBrowserHistory } from \"history\";\n\n// import Tech from './components/tech';\nimport DiceTable from './components/dice-table';\n\nimport './styles/app.css';\n\nconst history = createBrowserHistory();\n\nexport default () => {\n  return (\n  <Router history={history}>\n      <Switch>\n        <Route path=\"/\" component={DiceTable} />\n      </Switch>\n  </Router>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Routes from './routes';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}