{"version":3,"sources":["lib/rolling-calculator.js","components/rolling-calculator.js","routes.js","index.js"],"names":["calculator","dice","this","text","textOutput","_results","_cumulative","map","value","i","outcome","toString","padStart","length","hits","replace","outcomeP","reduce","accumulator","hitValue","dieIndex","calculate","out","k","push","Math","round","join","DieActionButton","onClick","children","className","type","DieBox","onUpdate","onRemove","useState","swiperInstance","setSwiperInstance","handleSwiperChange","swiper","activeIndex","useEffect","slideTo","dieValues","key","direction","mousewheel","onSlideChange","onInit","disabled","slideNext","Calculator","state","setDice","bind","setCalculation","renderCalulation","SwiperCore","use","Mousewheel","setState","swiperInit","values","filteredValues","_","filter","v","last","valueString","chain","sort","calculation","split","s","parseInt","results","cumulative","rows","diceBoxes","newValues","clone","undefined","splice","diceValueGroups","groupBy","toPairs","rolls","Component","history","createBrowserHistory","path","component","RollingCalculator","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66e06cf4.chunk.js","sourcesContent":["class simulator {\n    constructor(...dice) {\n        this.dice = dice;\n    }\n\n    trialRound() {\n        let hits = 0;\n        for (const hitValue of this.dice) {\n            const rollValue = Math.floor(Math.random() * 10) + 1;\n            if (rollValue >= hitValue) hits += 1;\n        }\n        return hits;\n    }\n\n    get results() {\n        if (!this._results) {\n            this.trials();\n        }\n        if (this.textOutput) {\n            const out = [];\n            for (const k in this._results) {\n                out.push(\n                    `${k}: ${((this._results[k] / this._trials) * 100).toFixed(1)}%`\n                );\n            }\n            return out.join(\"\\n\");\n        }\n        return this._results;\n    }\n\n    get cumulative() {\n        if (!this._cumulative) {\n            this.trials();\n        }\n        if (this.textOutput) {\n            const out = [];\n            for (const k in this._cumulative) {\n                out.push(\n                    `>= ${k}: ${((this._cumulative[k] / this._trials) * 100).toFixed(1)}%`\n                );\n            }\n            return out.join(\"\\n\");\n        }\n        return this._cumulative;\n    }\n\n    format(text = true) {\n        this.textOutput = text;\n        return this;\n    }\n\n    trials(nTrials = 10000) {\n        this._results = {};\n        this._cumulative = {};\n        this._trials = nTrials;\n\n        for (let i = 0; i <= this.dice.length; i += 1) {\n            this._results[i.toString(10)] = 0;\n        }\n\n        for (let n = 0; n < nTrials; n += 1) {\n            const hits = this.trialRound();\n\n            this._results[hits.toString(10)] += 1;\n        }\n\n        for (let i = this.dice.length; i >= 0; i -= 1) {\n            this._cumulative[i.toString(10)] = this._results[i.toString(10)];\n            if (this._cumulative[(i + 1).toString(10)]) {\n                this._cumulative[i.toString(10)] += this._cumulative[\n                    (i + 1).toString(10)\n                ];\n            }\n        }\n\n        return this;\n    }\n}\n\nclass calculator {\n    constructor(...dice) {\n        this.dice = dice;\n    }\n    get results() {\n        if (!this._results) {\n            this.calculate();\n        }\n        if (this.textOutput) {\n            const out = [];\n            for (const k in this._results) {\n                out.push(`${k}: ${Math.round(this._results[k] * 100)}%`);\n            }\n            return out.join(\"\\n\");\n        }\n        return this._results;\n    }\n    get cumulative() {\n        if (!this._cumulative) {\n            this.calculate();\n        }\n        if (this.textOutput) {\n            const out = [];\n            for (const k in this._cumulative) {\n                out.push(`>= ${k}: ${Math.round(this._cumulative[k] * 100)}%`);\n            }\n            return out.join(\"\\n\");\n        }\n        return this._cumulative;\n    }\n    format(text = true) {\n        this.textOutput = text;\n        return this;\n    }\n    calculate() {\n        this._results = {};\n        this._cumulative = {};\n\n        const diceP = this.dice.map((value) => (11 - value) / 10);\n        for (let i = 0; i < 2 ** this.dice.length; i += 1) {\n            const outcome = i.toString(2).padStart(this.dice.length, \"0\");\n            const hits = outcome.replace(/0/g, \"\").length;\n            const outcomeP = this.dice.reduce((accumulator, hitValue, dieIndex) => {\n                const p =\n                    outcome[dieIndex] === \"1\"\n                        ? (11 - hitValue) / 10\n                        : 1 - (11 - hitValue) / 10;\n                return accumulator * p;\n            }, 1);\n\n            if (!this._results[hits.toString(10)]) {\n                this._results[hits.toString(10)] = 0;\n            }\n            this._results[hits.toString(10)] += outcomeP;\n        }\n\n        for (let i = this.dice.length; i >= 0; i -= 1) {\n            this._cumulative[i.toString(10)] = this._results[i.toString(10)];\n            if (this._cumulative[(i + 1).toString(10)]) {\n                this._cumulative[i.toString(10)] += this._cumulative[\n                    (i + 1).toString(10)\n                ];\n            } else {\n                this._cumulative[i.toString(10)] = this._results[i.toString(10)];\n            }\n        }\n\n        return this;\n    }\n}\n\nexport { simulator, calculator };\n","import React, { useState, useEffect, Component } from \"react\";\nimport _ from \"lodash\";\nimport SwiperCore, { Mousewheel } from \"swiper\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport { FaPlusCircle, FaMinusCircle } from \"react-icons/fa\";\n\nimport { calculator } from \"../lib/rolling-calculator\";\n\n// import \"swiper/swiper.scss\";\n// import \"swiper/components/effect-cube/effect-cube.scss\";\nimport \"swiper/swiper-bundle.css\";\nimport \"../styles/components/rolling-calculator.css\";\n\nconst DieActionButton = ({ onClick, children } = {}) => (\n  <button className=\"die-action-button\" type=\"button\" onClick={onClick}>\n    {children}\n  </button>\n);\n\nconst DieBox = ({ onUpdate, onRemove, value } = {}) => {\n  // const [value, setValue] = useState(null);\n  const [swiperInstance, setSwiperInstance] = useState(null);\n\n  const handleSwiperChange = (swiper) => {\n    // setValue(swiper.activeIndex);\n    onUpdate(swiper.activeIndex);\n  };\n\n  useEffect(() => {\n    if (swiperInstance) {\n      swiperInstance.slideTo(value || 0, 0);\n    }\n  }, [value, swiperInstance]);\n\n  const dieValues = [];\n  for (let i = 1; i <= 10; i += 1) {\n    dieValues.push(<SwiperSlide key={i}>{i}</SwiperSlide>);\n  }\n\n  return (\n    <div className={`die-box ${value === null ? \"inactive\" : \"active\"}`}>\n      <Swiper\n        // spaceBetween={0.25}\n        // slidesPerView={1.75}\n        direction=\"vertical\"\n        // cssMode={false}\n        mousewheel\n        // cubeEffect\n        onSlideChange={handleSwiperChange}\n        // onSwiper={(swiper) => console.log(swiper)}\n        // onScroll={(...stuff) => console.log(\"onScroll\", stuff)}\n        // onScrollCapture={(...stuff) => console.log(\"onScrollCapture\", stuff)}\n        onInit={(swiper) => {\n          setSwiperInstance(swiper);\n        }}\n      >\n        <SwiperSlide>\n          {value === null ? (\n            <DieActionButton\n              disabled={!(swiperInstance && swiperInstance.slideNext)}\n              onClick={() => {\n                swiperInstance.slideTo(1);\n              }}\n            >\n              <FaPlusCircle />\n            </DieActionButton>\n          ) : (\n            <DieActionButton>\n              <FaMinusCircle onClick={onRemove} />\n            </DieActionButton>\n          )}\n        </SwiperSlide>\n        {dieValues}\n      </Swiper>\n    </div>\n  );\n};\n\nclass Calculator extends Component {\n  constructor() {\n    super();\n    this.state = { dice: [null] };\n    this.setDice = this.setDice.bind(this);\n    this.setCalculation = this.setCalculation.bind(this);\n    this.renderCalulation = this.renderCalulation.bind(this);\n  }\n  componentDidMount() {\n    SwiperCore.use([Mousewheel]);\n    this.setState({ swiperInit: true });\n  }\n  setDice(values) {\n    const filteredValues = _.filter(values, (v) => typeof v === \"number\");\n    if (_.last(filteredValues)) {\n      filteredValues.push(null);\n    }\n    this.setState({\n      dice: filteredValues\n    });\n\n    this.setCalculation();\n  }\n  setCalculation() {\n    const valueString = _.chain(this.state.dice)\n      .filter()\n      .sort()\n      .value()\n      .join(\",\");\n    if (valueString === this.state.valueString) {\n      return;\n    }\n\n    const calculation = new calculator(\n      ...valueString.split(\",\").map((s) => parseInt(s, 10))\n    );\n\n    this.setState({\n      calculator: {\n        results: calculation.results,\n        cumulative: calculation.cumulative\n      },\n      valueString\n    });\n  }\n  renderCalulation() {\n    if (!this.state.calculator) return null;\n\n    const rows = [];\n    for (const hits in this.state.calculator.results) {\n      rows.push(\n        <tr key={hits}>\n          <th>{hits}</th>\n          <td>{Math.round(this.state.calculator.cumulative[hits] * 100)}%</td>\n          <td>{Math.round(this.state.calculator.results[hits] * 100)}%</td>\n        </tr>\n      );\n    }\n\n    return (\n      <table className=\"calculation-table mt-2\">\n        <thead>\n          <tr>\n            <th>Hits</th>\n            <th>At least</th>\n            <th>Exactly</th>\n          </tr>\n        </thead>\n        <tbody>{rows}</tbody>\n      </table>\n    );\n  }\n  render() {\n    const diceBoxes = [];\n    if (this.state.swiperInit) {\n      for (let i = 0; i < this.state.dice.length; i += 1) {\n        diceBoxes.push(\n          <DieBox\n            key={i}\n            value={this.state.dice[i]}\n            onUpdate={(value) => {\n              const newValues = _.clone(this.state.dice);\n              while (newValues[i] === undefined) {\n                newValues.push(null);\n              }\n              newValues[i] = value;\n              this.setDice(newValues);\n            }}\n            onRemove={() => {\n              const newValues = _.clone(this.state.dice);\n              newValues.splice(i, 1);\n              this.setDice(newValues);\n            }}\n          />\n        );\n      }\n    }\n\n    const diceValueGroups = _.chain(this.state.dice)\n      .filter()\n      .groupBy()\n      .toPairs()\n      .map(([value, rolls]) => `${value}×${rolls.length}`)\n      .value();\n\n    return (\n      <div className=\"container rolling-calculator my-2\">\n        <h1>Set some dice to see some numbers</h1>\n        <div className=\"dice-container my-2\">{diceBoxes}</div>\n        {diceValueGroups.length > 0 && (\n          <h4>Rolling for: {diceValueGroups.join(\", \")}</h4>\n        )}\n        {this.renderCalulation()}\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React from \"react\";\nimport _ from 'lodash';\nimport { Router, Route, Switch } from \"react-router\";\nimport { createBrowserHistory } from \"history\";\n\n// import Tech from './components/tech';\nimport RollingCalculator from './components/rolling-calculator';\n\nimport './styles/app.css';\n\nconst history = createBrowserHistory();\n\nexport default () => {\n  return (\n  <Router history={history}>\n      <Switch>\n        <Route path=\"/\" component={RollingCalculator} />\n      </Switch>\n  </Router>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Routes from './routes';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}